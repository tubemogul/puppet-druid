#! /bin/sh
### BEGIN INIT INFO
# Provides:          druid-pivot
# Required-Start:    $network $named $remote_fs $syslog
# Required-Stop:     $network $named $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: druid pivot
# Description:       Druid pivot Node
### END INIT INFO

PIVOT_HOME="<%= scope.lookupvar("druid::pivot::home_dir") %>"
PIVOT_CONFIG="<%= scope.lookupvar("druid::pivot::config_dir") %>/config.yaml"

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON="${PIVOT_HOME}/bin/pivot"
DAEMON_OPTS="-c ${PIVOT_CONFIG}"
NAME="druid-pivot"
DESC="druid pivot"
PIDFILE="/var/run/druid/${NAME}.pid"
LOGFILE="<%= scope.lookupvar("druid::pivot::log_dir") %>/${NAME}.out"

mkdir -p `dirname $PIDFILE`
mkdir -p `dirname $LOGFILE`
cd ${PIVOT_HOME}/../..
mkdir -p var/pivot

. /lib/lsb/init-functions

start_druid_pivot_daemon() {
    start-stop-daemon --start --background --quiet --make-pidfile --pidfile $PIDFILE --startas /bin/sh -- -c "exec $DAEMON $DAEMON_OPTS > $LOGFILE 2>&1"
}

stop_druid_pivot_daemon() {
        start-stop-daemon --stop --retry TERM/10/KILL/5 --quiet --oknodo --pidfile $PIDFILE
}

status_druid_pivot_daemon() {
        status_of_proc -p "${PIDFILE}" "${DAEMON}" "${NAME}"
}

case "$1" in
    start)
        log_begin_msg "Starting $DESC"
        start_druid_pivot_daemon
        log_end_msg $?
        ;;
    stop)
        log_begin_msg "Stopping $DESC"
        stop_druid_pivot_daemon
        log_end_msg $?
        ;;
    status)
        status_druid_pivot_daemon
        ;;
    restart|force-reload)
        log_begin_msg "Restarting $DESC"
        stop_druid_pivot_daemon
        start_druid_pivot_daemon
        log_end_msg $?
        ;;
  *)
        echo "Usage: $0 {start|stop|status|restart|force-reload}" >&2
        exit 1
        ;;
esac

